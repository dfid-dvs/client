import React from 'react';
import { _cs } from '@togglecorp/fujs';
import Faram from '@togglecorp/faram';

import RadioInput from '#rsci/RadioInput';
import MultiSelectInputWithList from '#rsci/MultiSelectInputWithList';
import Button from '#rsu/../v2/Action/Button';
import { MultiResponse } from '#constants/types';

import Logo from '#resources/img/logo-white-01.svg';
import {
    createRequestClient,
    NewProps,
    ClientAttributes,
    methods,
} from '#request';
import styles from './styles.scss';

enum AdminLevel {
    Province,
    District,
    Municipality,
}

interface FaramValues {
    adminLevel?: AdminLevel;
}

interface FaramErrors {
}

interface OwnProps {
    className?: string;
}
interface State {
    faramValues: FaramValues;
    faramErrors: FaramErrors;
}
interface Params {
}
interface Options {
    key: number;
    name: string;
}
const adminLevelsList: Options[] = [
    {
        key: AdminLevel.Province,
        name: 'Province',
    },
    {
        key: AdminLevel.District,
        name: 'District',
    },
    {
        key: AdminLevel.Municipality,
        name: 'Municipality',
    },
];

interface Province {
    id: number;
    name: string;
    code: string;
    boundary: string;
}

interface District {
    id: number;
    provinceId: number;
    provinceName: string;
    name: string;
    code: string;
}

interface Municipality {
    id: number;
    provinceId: number;
    provinceName: string;
    districtId: number;
    districtName: string;
    name: string;
    gnTypeEn: string;
    gnTypeNp: string;
    population: number;
    geography: string;
    cbsCode: string;
    hlcitCode: string;
    pCode: string;
}

interface Sector {
    id: number;
    name: string;
}

interface SubSector {
    id: number;
    sectorId: number;
    sectorName: string;
    name: string;
    code: string;
}

interface Program {
    id: number;
    name: string;
    description: string;
    sector: number[];
    subSector: number[];
    markerCategoty: number[];
    markerValue: number[];
    partner: number[];
    programCode: string;
    budget: string;
}

interface Layer {
    id: number;
    name: string;
    layerName: string;
    workspace: string;
    geoserverUrl: string;
    storeName: string;
    type: string;
    category: string;
    filename: string;
    description: string;
}

interface Indicator {
    id: number;
    indicator: string;
    fullTitle: string;
    abstract: string;
    category: string;
    source: string;
    federalLevel: 'municipality level' | 'district level' | 'province level';
}

interface Marker {
    id: number;
    name: string;
}

interface SubMarker {
    id: number;
    value: string;
    markerCategoryId: number;
    markerCategory: string;
}


type Props = NewProps<OwnProps, Params>
const requestOptions: { [key: string]: ClientAttributes<OwnProps, Params> } = {
    indicatorGetRequest: {
        url: '/indicator-list/',
        method: methods.GET,
        onMount: true,
    },
    provinceGetRequest: {
        url: '/province/',
        method: methods.GET,
        onMount: true,
    },
    districtGetRequest: {
        url: '/district/',
        method: methods.GET,
        onMount: true,
    },
    municipalityGetRequest: {
        url: '/gapanapas/', /* change it to 'gapanapa' if it's ready to load. */
        method: methods.GET,
        onMount: true,
    },
    sectorGetRequest: {
        url: '/sector/',
        method: methods.GET,
        onMount: true,
    },
    subSectorGetRequest: {
        url: '/sub-sector/',
        method: methods.GET,
        onMount: true,
    },
    programGetRequest: {
        url: '/program/',
        method: methods.GET,
        onMount: true,
    },
    layerGetRequest: {
        url: '/map-layer/',
        method: methods.GET,
        onMount: true,
    },
    markerGetRequest: {
        url: '/marker-category/',
        method: methods.GET,
        onMount: true,
    },
    subMarkerGetRequest: {
        url: '/marker-value/',
        method: methods.GET,
        onMount: true,
    },
};

const indicatorKeySelector = (d: Indicator) => d.id;
const indicatorLabelSelector = (d: Indicator) => d.fullTitle;

const provinceKeySelector = (d: Province) => d.id;
const provinceLabelSelector = (d: Province) => d.name;

const districtKeySelector = (d: District) => d.id;
const districtLabelSelector = (d: District) => d.name;

const municipalityKeySelector = (d: Municipality) => d.id;
const municipalityLabelSelector = (d: Municipality) => d.name;

const sectorKeySelector = (d: Sector) => d.id;
const sectorLabelSelector = (d: Sector) => d.name;

const programKeySelector = (d: Program) => d.id;
const programLabelSelector = (d: Program) => d.name;

const layerKeySelector = (d: Layer) => d.id;
const layerLabelSelector = (d: Layer) => d.name;

const keySelector = (d: Options) => d.key;
const labelSelector = (d: Options) => d.name;

const backgroundLayerList: Options[] = [
    {
        key: 1,
        name: 'Population',
    },
    {
        key: 2,
        name: 'Travel times to medical facilities',
    },
];

class Sidebar extends React.PureComponent<Props, State> {
    private static schema = {
        fields: {
            adminLevel: [],
            adminArea: [],
            sectorList: [],
            programList: [],
            indicatorList: [],
            layerList: [],
            backgroundLayerList: [],
        },
    };

    public constructor(props: Props) {
        super(props);

        this.state = {
            faramErrors: {},
            faramValues: {},
        };
    }

    private handleChange = (faramValues: FaramValues, faramErrors: FaramErrors) => {
        this.setState({
            faramValues,
            faramErrors,
        });
    }

    private handleValidationFailure = (faramErrors: FaramErrors) => {
        this.setState({ faramErrors });
    }

    private handleValidationSuccess = (faramValues: FaramValues) => {
        console.warn('Success', faramValues);
    }

    public render() {
        const {
            className,
            requests: {
                indicatorGetRequest: {
                    pending: indicatorTitlePending,
                    response: indicatorResponse = {},
                },
                provinceGetRequest: {
                    response: provinceResponse = {},
                },
                districtGetRequest: {
                    response: districtResponse = {},
                },
                municipalityGetRequest: {
                    response: municipalityResponse = {},
                },
                sectorGetRequest: {
                    response: sectorResponse = {},
                },
                programGetRequest: {
                    response: programResponse = {},
                },
                layerGetRequest: {
                    response: layerResponse = {},
                },
                markerGetRequest: {
                    response: markerResponse = {},
                },
            },
        } = this.props;

        const { results: indicatorList = [] } = indicatorResponse as MultiResponse<Indicator>;
        console.warn('indicators', indicatorList);
        const { results: provinceList = [] } = provinceResponse as MultiResponse<Province>;
        console.warn('provinces', provinceList);
        const { results: districtList = [] } = districtResponse as MultiResponse<District>;
        console.warn('district list', districtList);
        const { results: municipalityList =
        [] } = municipalityResponse as MultiResponse<Municipality>;
        console.warn('municipality', municipalityList);
        const { results: sectorList = [] } = sectorResponse as MultiResponse<Sector>;
        console.warn('sectors', sectorList);
        const { results: programList = [] } = programResponse as MultiResponse<Program>;
        console.warn('programs', programList);
        const { results: layerList = [] } = layerResponse as MultiResponse<Layer>;
        console.warn('layers', layerList);
        const { results: markerList = [] } = markerResponse as MultiResponse<Marker>;
        console.warn('markers', markerList);

        const {
            faramErrors,
            faramValues,
        } = this.state;

        return (
            <div className={_cs(className, styles.sidebar)}>
                <div className={styles.sidebarContent}>
                    <img
                        className={styles.logo}
                        src={Logo}
                        alt="logo"
                        title="logo"
                    />
                    <Faram
                        schema={Sidebar.schema}
                        error={faramErrors}
                        value={faramValues}
                        onValidationFailure={this.handleValidationFailure}
                        onValidationSuccess={this.handleValidationSuccess}
                        onChange={this.handleChange}
                        disabled={indicatorTitlePending}
                    >
                        <div
                            className={_cs(
                                styles.adminLevels,
                                styles.dataCategory,
                            )}
                        >
                            <h3 className={styles.title}>
                                Administrative Levels
                            </h3>
                            <RadioInput
                                faramElementName="adminLevel"
                                className={styles.options}
                                options={adminLevelsList}
                                keySelector={keySelector}
                                labelSelector={labelSelector}
                            />
                            {faramValues.adminLevel === AdminLevel.Province && (
                                <MultiSelectInputWithList
                                    faramElementName="province"
                                    className={styles.selectOptions}
                                    options={provinceList}
                                    label="Province"
                                    placeholder=""
                                    keySelector={provinceKeySelector}
                                    labelSelector={provinceLabelSelector}
                                    emptyComponent={null}
                                />
                            )}
                            {faramValues.adminLevel === AdminLevel.District && (
                                <MultiSelectInputWithList
                                    faramElementName="district"
                                    className={styles.selectOptions}
                                    options={districtList}
                                    label="District"
                                    placeholder=""
                                    keySelector={districtKeySelector}
                                    labelSelector={districtLabelSelector}
                                    emptyComponent={null}
                                />
                            )}
                            {faramValues.adminLevel === AdminLevel.Municipality && (
                                <MultiSelectInputWithList
                                    faramElementName="municipality"
                                    className={styles.selectOptions}
                                    options={municipalityList}
                                    label="Municipality"
                                    placeholder=""
                                    keySelector={municipalityKeySelector}
                                    labelSelector={municipalityLabelSelector}
                                    emptyComponent={null}
                                />
                            )}
                        </div>

                        <div
                            className={_cs(
                                styles.dfidData,
                                styles.dataCategory,
                            )}
                        >
                            <h3 className={styles.title}>
                                DFID Data
                            </h3>
                            <MultiSelectInputWithList
                                label="Sectors"
                                placeholder=""
                                faramElementName="sectorList"
                                className={styles.sectorSelect}
                                options={sectorList}
                                keySelector={sectorKeySelector}
                                labelSelector={sectorLabelSelector}
                                emptyComponent={null}
                            />
                            <MultiSelectInputWithList
                                label="Programs"
                                placeholder=""
                                faramElementName="programList"
                                className={styles.programSelect}
                                options={programList}
                                keySelector={programKeySelector}
                                labelSelector={programLabelSelector}
                                searchValue
                                emptyComponent={null}
                            />
                        </div>
                        <div
                            className={_cs(
                                styles.secondaryData,
                                styles.dataCategory,
                            )}
                        >
                            <h3 className={styles.title}>
                                Secondary Data
                            </h3>

                            <MultiSelectInputWithList
                                faramElementName="indicatorList"
                                className={styles.indicatorSelect}
                                options={indicatorList}
                                label="Indicators"
                                placeholder=""
                                keySelector={indicatorKeySelector}
                                labelSelector={indicatorLabelSelector}
                                emptyComponent={null}
                            />

                            <MultiSelectInputWithList
                                faramElementName="layerList"
                                className={styles.layerSelect}
                                options={layerList}
                                label="Layers"
                                placeholder=""
                                keySelector={layerKeySelector}
                                labelSelector={layerLabelSelector}
                                emptyComponent={null}
                            />

                            <MultiSelectInputWithList
                                faramElementName="backgroundLayerList"
                                className={styles.backgroundLayerSelect}
                                options={backgroundLayerList}
                                label="Background Layers"
                                placeholder=""
                                keySelector={keySelector}
                                labelSelector={labelSelector}
                                emptyComponent={null}
                            />
                        </div>
                        <div
                            className={_cs(
                                styles.buttonsSection,
                                styles.dataCategory,
                            )}
                        >
                            <Button
                                buttonType="button-danger"
                                className={styles.button}
                                onClick={() => { console.warn('cancel clicked'); }}
                            >
                                Cancel
                            </Button>
                            <Button
                                className={styles.button}
                                type="submit"
                                buttonType="button-primary"
                                onClick={() => { console.warn('apply clicked'); }}
                            >
                                Apply
                            </Button>
                        </div>
                    </Faram>
                </div>
            </div>
        );
    }
}
export default createRequestClient(requestOptions)(Sidebar);
