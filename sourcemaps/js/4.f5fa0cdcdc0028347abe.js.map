{"version":3,"sources":["webpack:///./src/views/Covid19/useAgeGroupList.ts","webpack:///./src/views/Covid19/useMapStateForIndicator.tsx","webpack:///./src/views/Covid19/useMapStateForCovidFiveW.tsx","webpack:///./src/components/LastUpdated/index.tsx","webpack:///./src/views/Covid19/Stats/index.tsx","webpack:///./src/components/TextOutput/index.tsx","webpack:///./src/views/Covid19/TravelTimeLayer/mapTheme.ts","webpack:///./src/views/Covid19/TravelTimeLayer/index.tsx","webpack:///./src/views/Covid19/Tooltip/index.tsx","webpack:///./src/views/Covid19/index.tsx","webpack:///./src/views/Covid19/Stats/styles.css","webpack:///./src/components/LastUpdated/styles.css","webpack:///./src/views/Covid19/styles.css","webpack:///./src/components/TextOutput/styles.css","webpack:///./src/views/Covid19/Tooltip/styles.css"],"names":["useAgeGroupList","shouldUse","regionLevel","ageGroupListUrl","undefined","useRequest","ageGroupListPending","ageGroupListResponse","useMemo","sanitizedAgeGroupList","d","munid","groupedList","listToGroupList","provinceId","code","belowFourteen","sum","i","l0_14","fifteenToFourtyNine","l15_49","aboveFifty","l50plus","total","ltotal","districtId","useMapStateForIndicatorWithAgeGroup","selectedIndicator","selectedAgeGroup","useMapStateForIndicator","pendingIndicator","response","ageGroupList","mapState","isDefined","id","value","useMapStateForCovidFiveW","selectedFiveWOption","covidSpecificProjectsGetUrl","provinceUrl","districtUrl","municipalityUrl","apiEndPoint","provincePending","provinceListResponse","districtPending","districtListResponse","municipalityPending","municipalityListResponse","regionFiveWPending","regionFiveWListResponse","exhaustiveFiveWList","fiveWAllProvince","results","v","provinceCode","fw","province","districtCode","municipalityCode","fiveWAllDistrict","districts","fwProvinceId","p","district","fiveWAllMunicipality","municipalities","m","fwDistrictId","municipality","String","regionKey","groupedRegionData","data","key","options","unique","length","LastUpdatedDate","props","date","labelFromProps","label","dateClassName","labelClassName","className","dateString","Date","toDateString","_cs","styles","lastUpdatedContainer","StatOutput","statOutput","Numeral","precision","separatorShown","ExternalLink","link","href","externalLink","target","rel","icon","Stats","statusPending","status","stats","heading","LastUpdated","updated_at","Backdrop","LoadingAnimation","content","tested_total","tested_positive","tested_negative","in_isolation","deaths","footer","source","latest_sit_report","url","TextOutput","textOutput","nullValue","visibleLayout","visibility","noneLayout","theme","catchment","twelvehour","fillPaint","linePaint","eighthour","fourhour","uncovered","hospital","circlePaint","selectedHospitals","symbolPaint","symbolLayout","getTotalMalePopulation","region","result","m_5","m_10","m_15","m_20","m_25","m_30","m_35","m_40","m_45","m_50","m_55","m_60","m_65","m_70","m_75","m_80","Math","round","getTotalFemalePopulation","f_5","f_10","f_15","f_20","f_25","f_30","f_35","f_40","f_45","f_50","f_55","f_60","f_65","f_70","f_75","f_80","getTotalPopulation","tooltipOptions","closeOnClick","closeButton","offset","maxWidth","HospitalTooltip","lngLat","feature","properties","name","categoryName","category__name","typeName","type__name","contactNumber","contact_num","MapTooltip","coordinates","trackPointer","RegionTooltip","header","totalPopulationHeader","GAPA_NAPA","male","female","tickFormatter","useCallback","absoluteValue","abs","formatNumber","width","height","margin","top","right","left","bottom","stackOffset","layout","strokeDasharray","dataKey","type","stackId","fill","TravelTimeLayer","onHospitalClick","travelTimeShown","prefix","hospitalType","season","travelTimeType","React","useState","designatedHospitalProperties","setDesignatedHospitalProperties","handleDesignatedHospitalTooltipOpen","handleDesignatedHospitalTooltipHide","travelTimeRegionProperties","setTravelTimeRegionProperties","handleTravelTimeRegionOpen","handleTravelTimeRegionHide","hospitalSourceLayer","catchmentUrl","uncoveredUrl","catchmentFilter","uncoveredFilter","uncoveredLayout","catchmentLayout","MapSource","sourceKey","sourceOptions","MapLayer","layerKey","layerOptions","paint","filter","onMouseEnter","onMouseLeave","onClick","componentKeySelector","component","componentRendererParams","_","index","ComponentItem","listItem","count","budget","sector","secondTierPartner","sectorKeySelector","sectorRendererParams","SectorItem","Tooltip","dfidData","indicatorData","uniqueComponents","uniqueSectors","tooltip","normalize","sectors","List","keySelector","rendererParams","renderer","components","legendKeySelector","option","radius","legendValueSelector","legendRadiusSelector","travelTimeDetails","fiveWOptions","datatype","fiveWKeySelector","fiveWLabelSelector","indicatorKeySelector","indicator","indicatorLabelSelector","fullTitle","indicatorGroupKeySelector","category","ageGroupOptions","tooltipLabel","ageGroupKeySelector","ageGroup","ageGroupLabelSelector","hospitalTypeOptions","hospitalTypeKeySelector","hospitalTypeLabelSelector","seasonOptions","seasonKeySelector","seasonLabelSelector","travelTimeTypeOptions","travelTimeTypeKeySelector","travelTimeTypeLabelSelector","layerKeySelector","layerLabelSelector","onClickTooltipOptions","Covid19","useContext","NavbarContext","setFiveWOption","setSelectedIndicator","setSelectedAgeGroup","showHealthResource","setShowHealthResource","showHealthTravelTime","setShowHealthTravelTime","setSelectedHospitals","selectedSeason","setSeason","selectedTravelTimeType","setTravelTimeType","selectedHospitalType","setHospitalType","selectedLayer","setSelectedLayer","indicatorListGetUrl","indicatorListPending","indicatorListResponse","mapLayerGetUrl","mapLayerListPending","mapLayerListResponse","mapStateForIndicator","covidFiveWData","mapStateForFiveW","invertMapStyle","setInvertMapStyle","clickedRegionProperties","setClickedRegionProperties","indicatorOptions","push","abstract","indicatorTitle","fiveW","fiveWTitle","title","join","choroplethMapState","choroplethTitle","choroplethInteger","choroplethUnit","unit","bubbleMapState","bubbleTitle","bubbleInteger","bubbleUnit","titleForPrintBar","ageGroupTooltipLabelSelector","valueList","min","max","generateChoroplethMapPaintAndLegend","colorDomain","mapPaint","mapLegend","legend","dataMinValue","hasNegativeValues","hasPositiveValues","legendType","maxRadius","generateBubbleMapPaintAndLegend","bubblePaint","bubbleLegend","bubbleLegendType","selectedIndicatorDetails","handleHospitalToggle","hospitals","hospitalIndex","newHospitals","handleTooltipClose","handleMapRegionOnClick","useEffect","showTravelTimeChoropleth","rasterLayers","selectedRasterLayer","printMode","setPrintMode","ttInfoVisibility","setTtInfoVisbility","showLegend","handleTtInfoVisibilityChange","covid19","PrintButton","printModeButton","onPrintModeChange","IndicatorMap","mapContainer","choroplethMapPaint","bubbleMapPaint","rasterLayer","hideTooltipOnHover","onHide","mapStyleConfigContainer","RegionSelector","searchHidden","separator","health","ToggleButton","inputItem","onChange","SegmentInput","optionLabelSelector","optionKeySelector","Button","button","icons","travelTimeInputContainer","transparent","SelectInput","disabled","groupKeySelector","legendContainer","ChoroplethLegend","minValue","BubbleLegend","valueSelector","radiusSelector","RasterLegend","opacity","PrintDetailsBar","show","description","module","exports"],"mappings":"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","file":"js/4.f5fa0cdcdc0028347abe.js","sourcesContent":["import { useMemo } from 'react';\nimport {\n    listToGroupList,\n    sum,\n} from '@togglecorp/fujs';\n\nimport { RegionLevelOption } from '#types';\n\nimport useRequest from '#hooks/useRequest';\n\ninterface AgeGroup {\n    id: number;\n    munid: number;\n    provinceId: number;\n    districtId: number;\n    hlcit_code: string;\n    l0_14: number;\n    l15_49: number;\n    l50plus: number;\n    ltotal: number;\n    municipality: null;\n    district: number;\n}\n\ninterface AggregatedAgeGroup {\n    code: number;\n    belowFourteen: number;\n    fifteenToFourtyNine: number;\n    aboveFifty: number;\n    total: number;\n}\n\nfunction useAgeGroupList(\n    shouldUse: boolean,\n    regionLevel: RegionLevelOption,\n): [boolean, AggregatedAgeGroup[]] {\n    const ageGroupListUrl = shouldUse\n        ? 'https://covidapi.naxa.com.np/api/v1/age-data/'\n        : undefined;\n\n    const [\n        ageGroupListPending,\n        ageGroupListResponse,\n    ] = useRequest<AgeGroup[]>(ageGroupListUrl);\n\n    const ageGroupList = useMemo(\n        () => {\n            if (!ageGroupListResponse) {\n                return [];\n            }\n\n            // NOTE: this municipality has a very large value so skipping it\n            const sanitizedAgeGroupList = ageGroupListResponse.filter(\n                d => d.munid !== 38,\n            );\n\n            switch (regionLevel) {\n                case 'province': {\n                    const groupedList = listToGroupList(\n                        sanitizedAgeGroupList,\n                        d => d.provinceId,\n                    );\n                    const ageGroupListForProvince: AggregatedAgeGroup[] = Object.keys(groupedList)\n                        .map(d => ({\n                            code: +d,\n                            belowFourteen: sum(groupedList[d].map(i => i.l0_14)),\n                            fifteenToFourtyNine: sum(groupedList[d].map(i => i.l15_49)),\n                            aboveFifty: sum(groupedList[d].map(i => i.l50plus)),\n                            total: sum(groupedList[d].map(i => i.ltotal)),\n                        }));\n                    return ageGroupListForProvince;\n                }\n                case 'district': {\n                    const groupedList = listToGroupList(\n                        sanitizedAgeGroupList,\n                        d => d.districtId,\n                    );\n                    const ageGroupListForDistrict: AggregatedAgeGroup[] = Object.keys(groupedList)\n                        .map(d => ({\n                            code: +d,\n                            belowFourteen: sum(groupedList[d].map(i => i.l0_14)),\n                            fifteenToFourtyNine: sum(groupedList[d].map(i => i.l15_49)),\n                            aboveFifty: sum(groupedList[d].map(i => i.l50plus)),\n                            total: sum(groupedList[d].map(i => i.ltotal)),\n                        }));\n                    return ageGroupListForDistrict;\n                }\n                case 'municipality': {\n                    const ageGroupListForMunicipality: AggregatedAgeGroup[] = sanitizedAgeGroupList\n                        .map(d => ({\n                            code: d.munid,\n                            belowFourteen: d.l0_14,\n                            fifteenToFourtyNine: d.l15_49,\n                            aboveFifty: d.l50plus,\n                            total: d.ltotal,\n                        }));\n                    return ageGroupListForMunicipality;\n                }\n                default: {\n                    const ageGroupListForNone: AggregatedAgeGroup[] = [];\n                    return ageGroupListForNone;\n                }\n            }\n        },\n        [ageGroupListResponse, regionLevel],\n    );\n\n    return [\n        ageGroupListPending,\n        ageGroupList,\n    ];\n}\nexport default useAgeGroupList;\n","import { isDefined } from '@togglecorp/fujs';\nimport {\n    RegionLevelOption,\n    MapStateItem,\n} from '#types';\nimport useMapStateForIndicator from '#hooks/useMapStateForIndicator';\n\nimport { AgeGroupOption } from './types';\nimport useAgeGroupList from './useAgeGroupList';\n\nfunction useMapStateForIndicatorWithAgeGroup(\n    regionLevel: RegionLevelOption,\n    selectedIndicator: number | undefined,\n    selectedAgeGroup: AgeGroupOption | undefined,\n): [boolean, MapStateItem[]] {\n    const [pendingIndicator, response] = useMapStateForIndicator(regionLevel, selectedIndicator);\n\n    const [\n        ageGroupListPending,\n        ageGroupList,\n    ] = useAgeGroupList(selectedIndicator === -1, regionLevel);\n\n    let mapState: MapStateItem[] = [];\n    if (\n        isDefined(selectedIndicator)\n        && selectedIndicator === -1\n        && selectedAgeGroup\n    ) {\n        mapState = ageGroupList.map(d => ({\n            id: d.code,\n            value: d[selectedAgeGroup],\n        }));\n    } else if (response) {\n        mapState = response;\n    }\n\n    const pending = pendingIndicator || ageGroupListPending;\n    return [pending, mapState];\n}\n\nexport default useMapStateForIndicatorWithAgeGroup;\n","import { useMemo } from 'react';\nimport { isDefined, listToGroupList, unique } from '@togglecorp/fujs';\nimport {\n    MultiResponse,\n    RegionLevelOption,\n    Province,\n    District,\n    Municipality,\n} from '#types';\n\nimport { apiEndPoint } from '#utils/constants';\nimport useRequest from '#hooks/useRequest';\n\nimport {\n    CovidFiveW,\n    MapStateFiveWData,\n    CovidFiveWRegionKey,\n    CovidFiveWOptionKey,\n} from './types';\n\nfunction useMapStateForCovidFiveW(\n    regionLevel: RegionLevelOption,\n    selectedFiveWOption: CovidFiveWOptionKey | undefined,\n): [boolean, MapStateFiveWData[]] {\n    let covidSpecificProjectsGetUrl;\n    let provinceUrl;\n    let districtUrl;\n    let municipalityUrl;\n\n    if (isDefined(selectedFiveWOption)) {\n        covidSpecificProjectsGetUrl = `${apiEndPoint}/covid/covid-specific-program/`;\n        municipalityUrl = `${apiEndPoint}/core/municipality/`;\n        districtUrl = `${apiEndPoint}/core/district/`;\n        provinceUrl = `${apiEndPoint}/core/province/`;\n    }\n\n    const [\n        provincePending,\n        provinceListResponse,\n    ] = useRequest<MultiResponse<Province>>(provinceUrl);\n\n    const [\n        districtPending,\n        districtListResponse,\n    ] = useRequest<MultiResponse<District>>(districtUrl);\n\n    const [\n        municipalityPending,\n        municipalityListResponse,\n    ] = useRequest<MultiResponse<Municipality>>(municipalityUrl);\n\n    const [\n        regionFiveWPending,\n        regionFiveWListResponse,\n    ] = useRequest<MultiResponse<CovidFiveW>>(covidSpecificProjectsGetUrl);\n\n    const fiveWMapState: MapStateFiveWData[] = useMemo(\n        () => {\n            if (!regionFiveWListResponse\n                || !selectedFiveWOption\n                || !provinceListResponse\n                || !districtListResponse\n                || !municipalityListResponse\n            ) {\n                return [];\n            }\n\n            let exhaustiveFiveWList: CovidFiveW[] = [];\n            const fiveWAllProvince = regionFiveWListResponse.results\n                .filter(v => v.provinceCode === '-1')\n                .map(fw => (\n                    provinceListResponse.results.map(province => ({\n                        ...fw,\n                        provinceCode: province.code,\n                        districtCode: '-1',\n                        municipalityCode: '-1',\n                    })))).flat();\n\n            exhaustiveFiveWList = [\n                ...fiveWAllProvince,\n                ...regionFiveWListResponse.results.filter(v => v.provinceCode !== '-1'),\n            ];\n\n            const fiveWAllDistrict = exhaustiveFiveWList.filter(v => v.districtCode === '-1')\n                .map((fw) => {\n                    const districts = districtListResponse.results.filter((d) => {\n                        const fwProvinceId = provinceListResponse\n                            .results.find(p => p.code === fw.provinceCode)?.id;\n                        return d.provinceId === fwProvinceId;\n                    });\n                    return districts.map(district => ({\n                        ...fw,\n                        districtCode: district.code,\n                        municipalityCode: '-1',\n                    }));\n                }).flat();\n\n            exhaustiveFiveWList = [\n                ...fiveWAllDistrict,\n                ...exhaustiveFiveWList.filter(v => v.districtCode !== '-1'),\n            ];\n\n            const fiveWAllMunicipality = exhaustiveFiveWList\n                .filter(v => v.municipalityCode === '-1')\n                .map((fw) => {\n                    const municipalities = municipalityListResponse.results.filter((m) => {\n                        const fwDistrictId = districtListResponse\n                            .results.find(d => d.code === fw.districtCode)?.id;\n                        return m.districtId === fwDistrictId;\n                    });\n                    return municipalities.map(municipality => ({\n                        ...fw,\n                        municipalityCode: String(municipality.code),\n                    }));\n                }).flat();\n\n            exhaustiveFiveWList = [\n                ...fiveWAllMunicipality,\n                ...exhaustiveFiveWList.filter(v => v.municipalityCode !== '-1'),\n            ];\n\n            let regionKey: CovidFiveWRegionKey = 'provinceCode';\n            switch (regionLevel) {\n                case 'province': {\n                    regionKey = 'provinceCode';\n                    break;\n                }\n                case 'district': {\n                    regionKey = 'districtCode';\n                    break;\n                }\n                case 'municipality': {\n                    regionKey = 'municipalityCode';\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n\n            const groupedRegionData = listToGroupList(\n                exhaustiveFiveWList,\n                data => data[regionKey],\n            );\n            const mapState = Object.entries(groupedRegionData).map(([key, value]) => {\n                const options = unique(value.map(v => v[selectedFiveWOption]));\n                return {\n                    id: +key,\n                    value: (options?.length || 0),\n                    data: value,\n                };\n            });\n            return mapState;\n        },\n        [\n            regionFiveWListResponse,\n            selectedFiveWOption,\n            regionLevel,\n            provinceListResponse,\n            districtListResponse,\n            municipalityListResponse,\n        ],\n    );\n\n    const pending = regionFiveWPending || provincePending || districtPending || municipalityPending;\n    return [pending, fiveWMapState];\n}\n\nexport default useMapStateForCovidFiveW;\n","import React, { useMemo } from 'react';\nimport { _cs } from '@togglecorp/fujs';\n\nimport styles from './styles.css';\n\ninterface Props {\n    label?: React.ReactNode;\n    labelClassName?: string;\n    date?: string;\n    dateClassName?: string;\n    className?: string;\n}\n\nfunction LastUpdatedDate(props: Props) {\n    const {\n        date,\n        label: labelFromProps,\n        dateClassName,\n        labelClassName,\n        className,\n    } = props;\n\n    const label = labelFromProps || 'Last updated on';\n\n    const dateString = useMemo(() => {\n        if (!date) {\n            return '';\n        }\n        const dateObj = new Date(date);\n        return dateObj.toDateString();\n    }, [date]);\n\n    if (!date) {\n        return null;\n    }\n\n    return (\n        <div className={_cs(className, styles.lastUpdatedContainer)}>\n            <h3 className={_cs(labelClassName, styles.label)}>\n                {label}\n            </h3>\n            <div className={_cs(styles.date, dateClassName)}>\n                {dateString}\n            </div>\n        </div>\n    );\n}\nexport default LastUpdatedDate;\n","import React from 'react';\nimport { _cs } from '@togglecorp/fujs';\nimport { GoLinkExternal } from 'react-icons/go';\n\nimport Backdrop from '#components/Backdrop';\nimport LoadingAnimation from '#components/LoadingAnimation';\n\nimport Numeral from '#components/Numeral';\nimport LastUpdated from '#components/LastUpdated';\n\nimport useRequest from '#hooks/useRequest';\n\nimport styles from './styles.css';\n\ninterface StatOutputProps {\n    label: string | number;\n    value: number | undefined;\n}\nconst StatOutput = ({\n    label,\n    value,\n}: StatOutputProps) => (\n    <div className={styles.statOutput}>\n        <div className={styles.value}>\n            <Numeral\n                value={value}\n                precision={0}\n                separatorShown\n            />\n        </div>\n        <div className={styles.label}>\n            { label }\n        </div>\n    </div>\n);\n\ninterface ExternalLinkProps {\n    label: string | number;\n    link: string | undefined;\n}\n\nconst ExternalLink = ({\n    link,\n    label,\n}: ExternalLinkProps) => (\n    <a\n        href={link}\n        className={styles.externalLink}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n    >\n        <GoLinkExternal className={styles.icon} />\n        <div className={styles.label}>\n            { label }\n        </div>\n    </a>\n);\n\n\ninterface Status {\n    tested_positive: number;\n    tested_negative: number;\n    tested_total: number;\n    in_isolation: number;\n    pending_result: number;\n    recovered: number;\n    deaths: 0;\n    source: string;\n    updated_at: string;\n    latest_sit_report: {\n        type: string;\n        _id: string;\n        no: number;\n        date: string;\n        url: string;\n        created_at: string;\n        updated_at: string;\n        __v: number;\n    };\n}\n\ninterface Props {\n    className?: string;\n}\n\nfunction Stats(props: Props) {\n    const { className } = props;\n\n    const [\n        statusPending,\n        status,\n    ] = useRequest<Status>('https://nepalcorona.info/api/v1/data/nepal');\n\n    return (\n        <div className={_cs(className, styles.stats)}>\n            <h4 className={styles.heading}>\n                COVID-19 Summary\n                <LastUpdated date={status?.updated_at} />\n            </h4>\n            { statusPending && (\n                <Backdrop>\n                    <LoadingAnimation />\n                </Backdrop>\n            )}\n            <div className={styles.content}>\n                <StatOutput\n                    label=\"Tests performed\"\n                    value={status?.tested_total}\n                />\n                <StatOutput\n                    label=\"Tested positive\"\n                    value={status?.tested_positive}\n                />\n                <StatOutput\n                    label=\"Tested negative\"\n                    value={status?.tested_negative}\n                />\n                <StatOutput\n                    label=\"In isolation\"\n                    value={status?.in_isolation}\n                />\n                <StatOutput\n                    label=\"Deaths\"\n                    value={status?.deaths}\n                />\n            </div>\n            <div className={styles.footer}>\n                <ExternalLink\n                    link={status?.source}\n                    label=\"Source\"\n                />\n                <ExternalLink\n                    link={status?.latest_sit_report?.url}\n                    label=\"Latest situation report\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Stats;\n","import React from 'react';\nimport { isDefined } from '@togglecorp/fujs';\n\nimport styles from './styles.css';\n\ninterface TextOutputProps {\n    label: string | number;\n    value: React.ReactNode | null;\n}\n\nfunction TextOutput({\n    label,\n    value,\n}: TextOutputProps) {\n    return (\n        <div className={styles.textOutput}>\n            <div className={styles.label}>\n                { label }\n            </div>\n            { isDefined(value) ? (\n                <div className={styles.value}>\n                    { value }\n                </div>\n            ) : (\n                <div className={styles.nullValue}>\n                    N/A\n                </div>\n            )}\n        </div>\n    );\n}\nexport default TextOutput;\n","export const fourHourColor = 'green';\nexport const fourHourDarkColor = 'darkgreen';\n\nexport const eightHourColor = 'gold';\nexport const eightHourDarkColor = 'darkorange';\n\nexport const twelveHourColor = 'red';\nexport const twelveHourDarkColor = 'darkred';\n\nexport const fourHourUncoveredColor = 'green';\nexport const fourHourUncoveredDarkColor = 'darkgreen';\n\nexport const eightHourUncoveredColor = 'gold';\nexport const eightHourUncoveredDarkColor = 'darkorange';\n\nexport const twelveHourUncoveredColor = 'red';\nexport const twelveHourUncoveredDarkColor = 'darkred';\n\nconst uncoveredTwelveHourFillPaint: mapboxgl.FillPaint = {\n    'fill-color': twelveHourUncoveredColor,\n    'fill-opacity': 0.3,\n};\nconst uncoveredEightHourFillPaint: mapboxgl.FillPaint = {\n    'fill-color': eightHourUncoveredColor,\n    'fill-opacity': 0.3,\n};\nconst uncoveredFourHourFillPaint: mapboxgl.FillPaint = {\n    'fill-color': fourHourUncoveredColor,\n    'fill-opacity': 0.3,\n};\nconst uncoveredTwelveHourLinePaint: mapboxgl.LinePaint = {\n    'line-width': 2,\n    'line-color': twelveHourUncoveredDarkColor,\n    'line-opacity': [\n        'case',\n        ['==', ['feature-state', 'hovered'], true],\n        1,\n        0,\n    ],\n};\nconst uncoveredEightHourLinePaint: mapboxgl.LinePaint = {\n    'line-width': 2,\n    'line-color': eightHourUncoveredDarkColor,\n    'line-opacity': [\n        'case',\n        ['==', ['feature-state', 'hovered'], true],\n        1,\n        0,\n    ],\n};\nconst uncoveredFourHourLinePaint: mapboxgl.LinePaint = {\n    'line-width': 2,\n    'line-color': fourHourUncoveredDarkColor,\n    'line-opacity': [\n        'case',\n        ['==', ['feature-state', 'hovered'], true],\n        1,\n        0,\n    ],\n};\n\nconst catchmentTwelveHourFillPaint: mapboxgl.FillPaint = {\n    'fill-color': twelveHourColor,\n    'fill-opacity': 0.3,\n};\nconst catchmentEightHourFillPaint: mapboxgl.FillPaint = {\n    'fill-color': eightHourColor,\n    'fill-opacity': 0.3,\n};\nconst catchmentFourHourFillPaint: mapboxgl.FillPaint = {\n    'fill-color': fourHourColor,\n    'fill-opacity': 0.3,\n};\nconst catchmentTwelveHourLinePaint: mapboxgl.LinePaint = {\n    'line-width': 2,\n    'line-color': twelveHourDarkColor,\n    'line-opacity': [\n        'case',\n        ['==', ['feature-state', 'hovered'], true],\n        1,\n        0,\n    ],\n};\nconst catchmentEightHourLinePaint: mapboxgl.LinePaint = {\n    'line-width': 2,\n    'line-color': eightHourDarkColor,\n    'line-opacity': [\n        'case',\n        ['==', ['feature-state', 'hovered'], true],\n        1,\n        0,\n    ],\n};\nconst catchmentFourHourLinePaint: mapboxgl.LinePaint = {\n    'line-width': 2,\n    'line-color': fourHourDarkColor,\n    'line-opacity': [\n        'case',\n        ['==', ['feature-state', 'hovered'], true],\n        1,\n        0,\n    ],\n};\n\nconst hospitalCirclePaint = (selectedHospitals: string[]): mapboxgl.CirclePaint => ({\n    'circle-radius': 9,\n    'circle-color': '#fff',\n    'circle-stroke-color': '#a72828',\n    'circle-stroke-width': [\n        'case',\n        ['in', ['get', 'name'], ['literal', selectedHospitals]],\n        2,\n        0,\n    ],\n    'circle-opacity': [\n        'case',\n        ['in', ['get', 'name'], ['literal', selectedHospitals]],\n        0.9,\n        0.7,\n    ],\n});\n\n\nconst hospitalSymbolPaint: mapboxgl.SymbolPaint = {\n    'icon-color': '#a72828',\n};\n\nconst hospitalSymbolLayout: mapboxgl.SymbolLayout = {\n    'icon-image': 'hospital-15',\n    'icon-allow-overlap': true,\n};\n\nconst theme = {\n    catchment: {\n        twelvehour: {\n            fillPaint: catchmentTwelveHourFillPaint,\n            linePaint: catchmentTwelveHourLinePaint,\n        },\n        eighthour: {\n            fillPaint: catchmentEightHourFillPaint,\n            linePaint: catchmentEightHourLinePaint,\n        },\n        fourhour: {\n            fillPaint: catchmentFourHourFillPaint,\n            linePaint: catchmentFourHourLinePaint,\n        },\n    },\n    uncovered: {\n        twelvehour: {\n            fillPaint: uncoveredTwelveHourFillPaint,\n            linePaint: uncoveredTwelveHourLinePaint,\n        },\n        eighthour: {\n            fillPaint: uncoveredEightHourFillPaint,\n            linePaint: uncoveredEightHourLinePaint,\n        },\n        fourhour: {\n            fillPaint: uncoveredFourHourFillPaint,\n            linePaint: uncoveredFourHourLinePaint,\n        },\n    },\n    hospital: {\n        circlePaint: hospitalCirclePaint,\n\n        symbolPaint: hospitalSymbolPaint,\n        symbolLayout: hospitalSymbolLayout,\n    },\n};\n\nexport const visibleLayout: mapboxgl.LineLayout = {\n    visibility: 'visible',\n};\nexport const noneLayout: mapboxgl.LineLayout = {\n    visibility: 'none',\n};\n\nexport default theme;\n","import React, { useCallback, useMemo } from 'react';\nimport { sum } from '@togglecorp/fujs';\nimport {\n    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ReferenceLine,\n} from 'recharts';\n\nimport MapSource from '#remap/MapSource';\nimport MapLayer from '#remap/MapSource/MapLayer';\nimport MapTooltip from '#remap/MapTooltip';\n\nimport Numeral, { formatNumber } from '#components/Numeral';\nimport TextOutput from '#components/TextOutput';\n\nimport { Season, HospitalType, TravelTimeType } from '../types';\n\nimport theme, { visibleLayout, noneLayout } from './mapTheme';\n\n\n// const uncoveredColor = '#455a64';\n// const uncoveredDarkColor = '#1c313a';\n\n// const noOp = () => {};\n\nexport interface DesignatedHospital {\n    name: string;\n    category__name: string;\n    type__name: string;\n    contact_num: string;\n}\ntype SelectedHospital = GeoJSON.Feature<GeoJSON.Point, DesignatedHospital>;\n\nexport interface TravelTimeRegion {\n    f_5: number;\n    f_10: number;\n    f_15: number;\n    f_20: number;\n    f_25: number;\n    f_30: number;\n    f_35: number;\n    f_40: number;\n    f_45: number;\n    f_50: number;\n    f_55: number;\n    f_60: number;\n    f_65: number;\n    f_70: number;\n    f_75: number;\n    f_80: number;\n    m_5: number;\n    m_10: number;\n    m_15: number;\n    m_20: number;\n    m_25: number;\n    m_30: number;\n    m_35: number;\n    m_40: number;\n    m_45: number;\n    m_50: number;\n    m_55: number;\n    m_60: number;\n    m_65: number;\n    m_70: number;\n    m_75: number;\n    m_80: number;\n}\n\ninterface CatchmentRegion extends TravelTimeRegion {\n    name: string;\n}\ninterface UncoveredRegion extends TravelTimeRegion {\n    GAPA_NAPA: string;\n}\ntype Region = CatchmentRegion | UncoveredRegion;\ntype SelectedTravelTimeRegion = GeoJSON.Feature<GeoJSON.Point, Region>;\nfunction isCatchmentRegion(region: Region): region is CatchmentRegion {\n    return !!(region as CatchmentRegion).name;\n}\nfunction isUncoveredRegion(region: Region): region is UncoveredRegion {\n    return !!(region as UncoveredRegion).GAPA_NAPA;\n}\n\nfunction getTotalMalePopulation(region: TravelTimeRegion) {\n    const result = sum([\n        region.m_5, region.m_10, region.m_15, region.m_20, region.m_25, region.m_30,\n        region.m_35, region.m_40, region.m_45, region.m_50, region.m_55, region.m_60,\n        region.m_65, region.m_70, region.m_75, region.m_80,\n    ]);\n    return Math.round(result);\n}\nfunction getTotalFemalePopulation(region: TravelTimeRegion) {\n    const result = sum([\n        region.f_5, region.f_10, region.f_15, region.f_20, region.f_25, region.f_30,\n        region.f_35, region.f_40, region.f_45, region.f_50, region.f_55, region.f_60,\n        region.f_65, region.f_70, region.f_75, region.f_80,\n    ]);\n    return Math.round(result);\n}\nfunction getTotalPopulation(region: TravelTimeRegion) {\n    return getTotalMalePopulation(region) + getTotalFemalePopulation(region);\n}\n\nconst tooltipOptions: mapboxgl.PopupOptions = {\n    closeOnClick: false,\n    closeButton: false,\n    offset: 8,\n    maxWidth: '480px',\n};\n\ninterface HospitalTooltipProps {\n    lngLat: mapboxgl.LngLatLike;\n    feature: SelectedHospital;\n}\nfunction HospitalTooltip(props: HospitalTooltipProps) {\n    const {\n        lngLat,\n        feature: {\n            properties: {\n                name,\n                category__name: categoryName,\n                type__name: typeName,\n                contact_num: contactNumber,\n            },\n        },\n    } = props;\n    return (\n        <MapTooltip\n            coordinates={lngLat}\n            tooltipOptions={tooltipOptions}\n            trackPointer\n        >\n            <>\n                <h3>\n                    {name}\n                </h3>\n                <TextOutput\n                    label=\"Category\"\n                    value={categoryName}\n                />\n                <TextOutput\n                    label=\"Type\"\n                    value={typeName}\n                />\n                <TextOutput\n                    label=\"Contact\"\n                    value={contactNumber}\n                />\n            </>\n        </MapTooltip>\n    );\n}\n\ninterface RegionTooltipProps {\n    lngLat: mapboxgl.LngLatLike;\n    feature: SelectedTravelTimeRegion;\n}\nfunction RegionTooltip(props: RegionTooltipProps) {\n    const {\n        lngLat,\n        feature: {\n            properties,\n        },\n    } = props;\n\n\n    let header = '';\n    let totalPopulationHeader = '';\n    if (isCatchmentRegion(properties)) {\n        header = properties.name;\n        totalPopulationHeader = 'Total Population';\n    } else {\n        header = properties.GAPA_NAPA;\n        totalPopulationHeader = 'Uncovered Population';\n    }\n\n    const data = useMemo(\n        () => ([\n            { name: '80', male: properties.m_80, female: -properties.f_80 },\n            { name: '75', male: properties.m_75, female: -properties.f_75 },\n            { name: '70', male: properties.m_70, female: -properties.f_70 },\n            { name: '65', male: properties.m_65, female: -properties.f_65 },\n            { name: '60', male: properties.m_60, female: -properties.f_60 },\n            { name: '55', male: properties.m_55, female: -properties.f_55 },\n            { name: '50', male: properties.m_50, female: -properties.f_50 },\n            { name: '45', male: properties.m_45, female: -properties.f_45 },\n            { name: '40', male: properties.m_40, female: -properties.f_40 },\n            { name: '35', male: properties.m_35, female: -properties.f_35 },\n            { name: '30', male: properties.m_30, female: -properties.f_30 },\n            { name: '25', male: properties.m_25, female: -properties.f_25 },\n            { name: '20', male: properties.m_20, female: -properties.f_20 },\n            { name: '15', male: properties.m_15, female: -properties.f_15 },\n            { name: '10', male: properties.m_10, female: -properties.f_10 },\n            { name: '5', male: properties.m_5, female: -properties.f_5 },\n        ]),\n        [properties],\n    );\n\n    const tickFormatter = useCallback(\n        (value: number) => {\n            const absoluteValue = Math.abs(value);\n            return formatNumber(absoluteValue, true, true);\n        },\n        [],\n    );\n\n    return (\n        <MapTooltip\n            coordinates={lngLat}\n            tooltipOptions={tooltipOptions}\n            trackPointer\n        >\n            <>\n                <h3>\n                    {header}\n                </h3>\n                <TextOutput\n                    label={totalPopulationHeader}\n                    value={(\n                        <Numeral\n                            value={getTotalPopulation(properties)}\n                            precision={0}\n                        />\n                    )}\n                />\n                <TextOutput\n                    label=\"Female\"\n                    value={(\n                        <Numeral\n                            value={getTotalFemalePopulation(properties)}\n                            precision={0}\n                        />\n                    )}\n                />\n                <TextOutput\n                    label=\"Male\"\n                    value={(\n                        <Numeral\n                            value={getTotalMalePopulation(properties)}\n                            precision={0}\n                        />\n                    )}\n                />\n                <h4>\n                    Age distribution\n                </h4>\n                <BarChart\n                    width={300}\n                    height={200}\n                    data={data}\n                    margin={{\n                        top: 0, right: 0, left: 0, bottom: 0,\n                    }}\n                    stackOffset=\"sign\"\n                    layout=\"vertical\"\n                >\n                    <CartesianGrid\n                        strokeDasharray=\"3 3\"\n                    />\n                    <YAxis\n                        dataKey=\"name\"\n                        type=\"category\"\n                        width={30}\n                    />\n                    <XAxis\n                        type=\"number\"\n                        tickFormatter={tickFormatter}\n                    />\n                    <Tooltip />\n                    <Legend />\n                    <Bar\n                        dataKey=\"male\"\n                        stackId=\"total\"\n                        fill=\"#02a3fe\"\n                    />\n                    <Bar\n                        dataKey=\"female\"\n                        stackId=\"total\"\n                        fill=\"#ec49a6\"\n                    />\n                </BarChart>\n            </>\n        </MapTooltip>\n    );\n}\n\ninterface Props {\n    selectedHospitals: string[];\n    onHospitalClick: (feature: mapboxgl.MapboxGeoJSONFeature) => boolean;\n    travelTimeShown?: boolean;\n\n    prefix?: string;\n    season?: Season['key'];\n    hospitalType?: HospitalType['key'];\n    travelTimeType?: TravelTimeType['key'];\n}\n\nfunction TravelTimeLayer(props: Props) {\n    const {\n        selectedHospitals,\n        onHospitalClick,\n\n        travelTimeShown,\n        prefix,\n\n        hospitalType,\n        season,\n        travelTimeType,\n    } = props;\n\n    const [\n        designatedHospitalProperties,\n        setDesignatedHospitalProperties,\n    ] = React.useState<{ lngLat: mapboxgl.LngLatLike; feature: SelectedHospital }>();\n\n    const handleDesignatedHospitalTooltipOpen = useCallback(\n        (\n            feature: mapboxgl.MapboxGeoJSONFeature,\n            lngLat: mapboxgl.LngLat,\n        ) => {\n            setDesignatedHospitalProperties({\n                lngLat,\n                feature: feature as unknown as SelectedHospital,\n            });\n            return true;\n        },\n        [],\n    );\n\n    const handleDesignatedHospitalTooltipHide = useCallback(\n        () => {\n            setDesignatedHospitalProperties(undefined);\n        },\n        [],\n    );\n\n    const [\n        travelTimeRegionProperties,\n        setTravelTimeRegionProperties,\n    ] = React.useState<{ lngLat: mapboxgl.LngLatLike; feature: SelectedTravelTimeRegion }>();\n\n    const handleTravelTimeRegionOpen = useCallback(\n        (\n            feature: mapboxgl.MapboxGeoJSONFeature,\n            lngLat: mapboxgl.LngLat,\n        ) => {\n            setTravelTimeRegionProperties({\n                lngLat,\n                feature: feature as unknown as SelectedTravelTimeRegion,\n            });\n            return true;\n        },\n        [],\n    );\n\n    const handleTravelTimeRegionHide = useCallback(\n        () => {\n            setTravelTimeRegionProperties(undefined);\n        },\n        [],\n    );\n\n\n    const hospitalSourceLayer = hospitalType === 'deshosp'\n        ? 'coviddesignatedhospitalsgeo'\n        : 'covidhospitalsgeo';\n\n    const catchmentUrl = (\n        (hospitalType === 'deshosp' && season === 'dry' && 'mapbox://togglecorp.265cfnxb')\n        || (hospitalType === 'deshosp' && season === 'msn' && 'mapbox://togglecorp.1blomcjm')\n        || (hospitalType === 'allcovidhfs' && season === 'dry' && 'mapbox://togglecorp.0s4o7p46')\n        || (hospitalType === 'allcovidhfs' && season === 'msn' && 'mapbox://togglecorp.b26l1lz5')\n        || undefined\n    );\n\n    const uncoveredUrl = (\n        (hospitalType === 'deshosp' && season === 'dry' && 'mapbox://togglecorp.8z1qrkb2')\n        || (hospitalType === 'deshosp' && season === 'msn' && 'mapbox://togglecorp.ccbtdr4y')\n        || (hospitalType === 'allcovidhfs' && season === 'dry' && 'mapbox://togglecorp.8qpnv16e')\n        || (hospitalType === 'allcovidhfs' && season === 'msn' && 'mapbox://togglecorp.3ceodz8w')\n        || undefined\n    );\n\n    const catchmentFilter = selectedHospitals.length <= 0\n        ? undefined\n        : ['in', ['get', 'name'], ['literal', selectedHospitals]];\n\n    const uncoveredFilter = ['!=', ['get', 'GAPA_NAPA'], 'Koshi Tappu Wildlife Reserve'];\n\n    const uncoveredLayout = travelTimeShown && travelTimeType === 'uncovered'\n        ? visibleLayout\n        : noneLayout;\n    const catchmentLayout = travelTimeShown && travelTimeType === 'catchment'\n        ? visibleLayout\n        : noneLayout;\n\n    return (\n        <>\n            {uncoveredUrl && (\n                <MapSource\n                    sourceKey={`${prefix}-uncovered`}\n                    sourceOptions={{\n                        type: 'vector',\n                        url: uncoveredUrl,\n                    }}\n                >\n                    <MapLayer\n                        layerKey=\"fourhour-fill\"\n                        layerOptions={{\n                            type: 'fill',\n                            'source-layer': 'fourhourgeo',\n                            paint: theme.uncovered.fourhour.fillPaint,\n                            layout: uncoveredLayout,\n                            filter: uncoveredFilter,\n                        }}\n                        onMouseEnter={handleTravelTimeRegionOpen}\n                        onMouseLeave={handleTravelTimeRegionHide}\n                    />\n                    <MapLayer\n                        layerKey=\"eighthour-fill\"\n                        layerOptions={{\n                            type: 'fill',\n                            'source-layer': 'eighthourgeo',\n                            paint: theme.uncovered.eighthour.fillPaint,\n                            layout: uncoveredLayout,\n                            filter: uncoveredFilter,\n                        }}\n                        onMouseEnter={handleTravelTimeRegionOpen}\n                        onMouseLeave={handleTravelTimeRegionHide}\n                    />\n                    <MapLayer\n                        layerKey=\"twelvehour-fill\"\n                        layerOptions={{\n                            type: 'fill',\n                            'source-layer': 'twelvehourgeo',\n                            paint: theme.uncovered.twelvehour.fillPaint,\n                            layout: uncoveredLayout,\n                            filter: uncoveredFilter,\n                        }}\n                        onMouseEnter={handleTravelTimeRegionOpen}\n                        onMouseLeave={handleTravelTimeRegionHide}\n                    />\n\n                    <MapLayer\n                        layerKey=\"fourhour-line\"\n                        layerOptions={{\n                            type: 'line',\n                            'source-layer': 'fourhourgeo',\n                            paint: theme.uncovered.fourhour.linePaint,\n                            layout: uncoveredLayout,\n                            filter: uncoveredFilter,\n                        }}\n                    />\n                    <MapLayer\n                        layerKey=\"eighthour-line\"\n                        layerOptions={{\n                            type: 'line',\n                            'source-layer': 'eighthourgeo',\n                            paint: theme.uncovered.eighthour.linePaint,\n                            layout: uncoveredLayout,\n                            filter: uncoveredFilter,\n                        }}\n                    />\n                    <MapLayer\n                        layerKey=\"twelvehour-line\"\n                        layerOptions={{\n                            type: 'line',\n                            'source-layer': 'twelvehourgeo',\n                            paint: theme.uncovered.twelvehour.linePaint,\n                            layout: uncoveredLayout,\n                            filter: uncoveredFilter,\n                        }}\n                    />\n                </MapSource>\n            )}\n            {catchmentUrl && (\n                <MapSource\n                    sourceKey={`${prefix}-catchment`}\n                    sourceOptions={{\n                        type: 'vector',\n                        url: catchmentUrl,\n                    }}\n                >\n                    <MapLayer\n                        layerKey=\"twelvehour-fill\"\n                        layerOptions={{\n                            type: 'fill',\n                            'source-layer': 'twelvehourgeo',\n                            paint: theme.catchment.twelvehour.fillPaint,\n                            filter: catchmentFilter,\n                            layout: catchmentLayout,\n                        }}\n                        onMouseEnter={handleTravelTimeRegionOpen}\n                        onMouseLeave={handleTravelTimeRegionHide}\n                    />\n                    <MapLayer\n                        layerKey=\"eighthour-fill\"\n                        layerOptions={{\n                            type: 'fill',\n                            'source-layer': 'eighthourgeo',\n                            paint: theme.catchment.eighthour.fillPaint,\n                            filter: catchmentFilter,\n                            layout: catchmentLayout,\n                        }}\n                        onMouseEnter={handleTravelTimeRegionOpen}\n                        onMouseLeave={handleTravelTimeRegionHide}\n                    />\n                    <MapLayer\n                        layerKey=\"fourhour-fill\"\n                        layerOptions={{\n                            type: 'fill',\n                            'source-layer': 'fourhourgeo',\n                            paint: theme.catchment.fourhour.fillPaint,\n                            filter: catchmentFilter,\n                            layout: catchmentLayout,\n                        }}\n                        onMouseEnter={handleTravelTimeRegionOpen}\n                        onMouseLeave={handleTravelTimeRegionHide}\n                    />\n\n                    <MapLayer\n                        layerKey=\"twelvehour-line\"\n                        layerOptions={{\n                            type: 'line',\n                            'source-layer': 'twelvehourgeo',\n                            paint: theme.catchment.twelvehour.linePaint,\n                            filter: catchmentFilter,\n                            layout: catchmentLayout,\n                        }}\n                    />\n                    <MapLayer\n                        layerKey=\"eighthour-line\"\n                        layerOptions={{\n                            type: 'line',\n                            'source-layer': 'eighthourgeo',\n                            paint: theme.catchment.eighthour.linePaint,\n                            filter: catchmentFilter,\n                            layout: catchmentLayout,\n                        }}\n                    />\n                    <MapLayer\n                        layerKey=\"fourhour-line\"\n                        layerOptions={{\n                            type: 'line',\n                            'source-layer': 'fourhourgeo',\n                            paint: theme.catchment.fourhour.linePaint,\n                            filter: catchmentFilter,\n                            layout: catchmentLayout,\n                        }}\n                    />\n                </MapSource>\n            )}\n            <MapSource\n                sourceKey={`${prefix}-hospitals`}\n                sourceOptions={{\n                    type: 'vector',\n                    url: 'mapbox://togglecorp.7sfpl5br',\n                }}\n            >\n                <MapLayer\n                    layerKey=\"hospital-circle\"\n                    layerOptions={{\n                        type: 'circle',\n                        'source-layer': hospitalSourceLayer,\n                        // FIXME: memoize this\n                        paint: theme.hospital.circlePaint(selectedHospitals),\n                    }}\n                    onMouseEnter={handleDesignatedHospitalTooltipOpen}\n                    onMouseLeave={handleDesignatedHospitalTooltipHide}\n                    onClick={onHospitalClick}\n                />\n                <MapLayer\n                    layerKey=\"hospital-symbol\"\n                    layerOptions={{\n                        type: 'symbol',\n                        'source-layer': hospitalSourceLayer,\n                        paint: theme.hospital.symbolPaint,\n                        layout: theme.hospital.symbolLayout,\n                    }}\n                />\n                {designatedHospitalProperties && (\n                    <HospitalTooltip\n                        lngLat={designatedHospitalProperties.lngLat}\n                        feature={designatedHospitalProperties.feature}\n                    />\n                )}\n                {travelTimeRegionProperties && (\n                    <RegionTooltip\n                        lngLat={travelTimeRegionProperties.lngLat}\n                        feature={travelTimeRegionProperties.feature}\n                    />\n                )}\n            </MapSource>\n        </>\n    );\n}\nexport default TravelTimeLayer;\n","import React from 'react';\nimport { unique, sum } from '@togglecorp/fujs';\n\nimport TextOutput from '#components/TextOutput';\nimport Numeral from '#components/Numeral';\nimport List from '#components/List';\n\nimport { CovidFiveW } from '../types';\n\nimport styles from './styles.css';\n\nconst componentKeySelector = (d: CovidFiveW) => d.component;\nconst componentRendererParams = (_: string, d: CovidFiveW, i: number) => ({\n    value: d,\n    index: i + 1,\n});\ninterface ComponentItemProps {\n    index: number;\n    value: CovidFiveW;\n}\nconst ComponentItem = ({ index, value }: ComponentItemProps) => (\n    <div className={styles.listItem}>\n        <div className={styles.count}>\n            {`${index}.`}\n        </div>\n        <div className={styles.label}>\n            <div>\n                {value.component}\n            </div>\n            <TextOutput\n                label=\"Allocated Budget\"\n                value={(\n                    <Numeral\n                        value={value.budget}\n                        prefix=\"£\"\n                    />\n                )}\n            />\n            <TextOutput\n                label=\"Sector\"\n                value={value.sector}\n            />\n            <TextOutput\n                label=\"Partner\"\n                value={value.secondTierPartner}\n            />\n        </div>\n    </div>\n);\n\nconst sectorKeySelector = (d: CovidFiveW) => d.sector;\nconst sectorRendererParams = (_: string, d: CovidFiveW, i: number) => ({\n    value: d.sector,\n    index: i + 1,\n});\nconst SectorItem = ({ value, index }: { value: string; index: number }) => (\n    <div className={styles.listItem}>\n        <div className={styles.count}>\n            {`${index}.`}\n        </div>\n        <div className={styles.label}>\n            {value}\n        </div>\n    </div>\n);\n\n\ninterface Region {\n    name: string;\n}\n\ninterface Props {\n    feature: GeoJSON.Feature<GeoJSON.Polygon, Region>;\n    dfidData?: CovidFiveW[];\n    indicatorData?: { label?: string; value?: number };\n}\n\nconst Tooltip = ({\n    feature,\n    dfidData,\n    indicatorData,\n}: Props) => {\n    const uniqueComponents = unique(dfidData, d => d.component);\n    const uniqueSectors = unique(dfidData, d => d.sector);\n    // const totalBudget = uniqueComponents && sum(uniqueComponents.map(d => d.budget));\n\n    return (\n        <div className={styles.tooltip}>\n            <h3>\n                { feature.properties.name }\n            </h3>\n            {indicatorData && indicatorData.label && (\n                <TextOutput\n                    label={indicatorData.label}\n                    value={(\n                        <Numeral\n                            value={indicatorData.value}\n                            normalize\n                        />\n                    )}\n                />\n            )}\n            {/* totalBudget && (\n                <TextOutput\n                    label=\"Allocated Budget\"\n                    value={(\n                        <div className={styles.budget}>\n                            <Numeral\n                                value={totalBudget}\n                                prefix=\"£\"\n                            />\n                        </div>\n                    )}\n                />\n            ) */}\n            {uniqueSectors && (\n                <TextOutput\n                    label=\"No of sectors\"\n                    value={(\n                        <Numeral\n                            value={uniqueSectors.length}\n                        />\n                    )}\n                />\n            )}\n            {uniqueComponents && (\n                <TextOutput\n                    label=\"No of components\"\n                    value={(\n                        <Numeral\n                            value={uniqueComponents.length}\n                        />\n                    )}\n                />\n            )}\n            <div className={styles.content}>\n                {uniqueSectors && uniqueSectors.length > 0 && (\n                    <div className={styles.sectors}>\n                        <h4>Sectors</h4>\n                        <List\n                            data={uniqueSectors}\n                            keySelector={sectorKeySelector}\n                            rendererParams={sectorRendererParams}\n                            renderer={SectorItem}\n                        />\n                    </div>\n                )}\n                {uniqueComponents && uniqueComponents.length > 0 && (\n                    <div className={styles.components}>\n                        <h4>Components</h4>\n                        <List\n                            data={uniqueComponents}\n                            keySelector={componentKeySelector}\n                            rendererParams={componentRendererParams}\n                            renderer={ComponentItem}\n                        />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Tooltip;\n","import React, { useState, useCallback, useContext, useMemo, useEffect } from 'react';\nimport {\n    IoIosClose,\n    IoIosInformationCircleOutline,\n} from 'react-icons/io';\nimport {\n    _cs,\n    isDefined,\n} from '@togglecorp/fujs';\n\nimport MapTooltip from '#remap/MapTooltip';\n\nimport RegionSelector from '#components/RegionSelector';\nimport SegmentInput from '#components/SegmentInput';\nimport NavbarContext from '#components/NavbarContext';\nimport SelectInput from '#components/SelectInput';\nimport ChoroplethLegend from '#components/ChoroplethLegend';\nimport ToggleButton from '#components/ToggleButton';\nimport Button from '#components/Button';\nimport BubbleLegend, { BubbleLegendType } from '#components/BubbleLegend';\nimport IndicatorMap from '#components/IndicatorMap';\nimport PrintButton from '#components/PrintButton';\nimport PrintDetailsBar from '#components/PrintDetailsBar';\nimport RasterLegend from '#components/RasterLegend';\n\nimport useRequest from '#hooks/useRequest';\n\nimport useMapStateForIndicator from './useMapStateForIndicator';\nimport useMapStateForCovidFiveW from './useMapStateForCovidFiveW';\n\nimport {\n    Layer,\n    LegendItem,\n    MultiResponse,\n    Indicator,\n} from '#types';\n\nimport {\n    generateChoroplethMapPaintAndLegend,\n    generateBubbleMapPaintAndLegend,\n} from '#utils/common';\nimport {\n    colorDomain,\n    apiEndPoint,\n} from '#utils/constants';\n\nimport Stats from './Stats';\n\nimport TravelTimeLayer, {\n    DesignatedHospital,\n} from './TravelTimeLayer';\nimport {\n    fourHourColor,\n    eightHourColor,\n    twelveHourColor,\n    fourHourUncoveredColor,\n    eightHourUncoveredColor,\n    twelveHourUncoveredColor,\n} from './TravelTimeLayer/mapTheme';\n\nimport Tooltip from './Tooltip';\nimport {\n    FiveWOption,\n    AgeGroup,\n    HospitalType,\n    Season,\n    TravelTimeType,\n    AgeGroupOption,\n    CovidFiveWOptionKey,\n} from './types';\n\nimport styles from './styles.css';\n\nconst legendKeySelector = (option: LegendItem) => option.radius;\nconst legendValueSelector = (option: LegendItem) => option.value;\nconst legendRadiusSelector = (option: LegendItem) => option.radius;\n\nconst travelTimeDetails = (\n    <span>\n        These maps show the catchment areas of COVID hospitals in Nepal based on\n        one-way travel time cutoffs of 4 / 8 / 12 hours using the fastest possible\n        means of transport, which roughly correspond to 1 / 2 / 3 day round trips.\n        The uncovered layers show the inverse of these catchments.\n        Population from\n        <a\n            className={styles.link}\n            href=\"https://www.worldpop.org/project/categories?id=3\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            WorldPop 2020 projections.\n        </a>\n        <a\n            className={styles.link}\n            href=\"http://documents.worldbank.org/curated/en/605991565195559324/Measuring-Inequality-of-Access-Modeling-Physical-Remoteness-in-Nepal\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            Travel time models from Banick and Kawasoe (2019)\n        </a>\n    </span>\n);\n\nconst fiveWOptions: FiveWOption[] = [\n    {\n        key: 'component',\n        label: 'No. of components',\n        datatype: 'integer',\n    },\n    {\n        key: 'sector',\n        label: 'No. of sectors',\n        datatype: 'integer',\n    },\n];\nconst fiveWKeySelector = (option: FiveWOption) => option.key;\nconst fiveWLabelSelector = (option: FiveWOption) => option.label;\n\nconst indicatorKeySelector = (indicator: Indicator) => indicator.id;\nconst indicatorLabelSelector = (indicator: Indicator) => indicator.fullTitle;\nconst indicatorGroupKeySelector = (indicator: Indicator) => indicator.category;\n\nconst ageGroupOptions: AgeGroup[] = [\n    { key: 'belowFourteen', label: 'Below 14', tooltipLabel: 'Number of People Aged Below 14' },\n    { key: 'fifteenToFourtyNine', label: '15 to 49', tooltipLabel: 'Number of Peple Aged From 15 to 49' },\n    { key: 'aboveFifty', label: 'Above 50', tooltipLabel: 'Number of People Aged Above 50' },\n];\nconst ageGroupKeySelector = (ageGroup: AgeGroup) => ageGroup.key;\nconst ageGroupLabelSelector = (ageGroup: AgeGroup) => ageGroup.label;\nconst ageGroupTooltipLabelSelector = (ageGroup: AgeGroup) => ageGroup.tooltipLabel;\n\nconst hospitalTypeOptions: HospitalType[] = [\n    { key: 'deshosp', label: 'Covid Designated' },\n    { key: 'allcovidhfs', label: 'All' },\n];\nconst hospitalTypeKeySelector = (hospitalType: HospitalType) => hospitalType.key;\nconst hospitalTypeLabelSelector = (hospitalType: HospitalType) => hospitalType.label;\n\nconst seasonOptions: Season[] = [\n    { key: 'dry', label: 'Dry' },\n    { key: 'msn', label: 'Monsoon' },\n];\nconst seasonKeySelector = (season: Season) => season.key;\nconst seasonLabelSelector = (season: Season) => season.label;\n\nconst travelTimeTypeOptions: TravelTimeType[] = [\n    { key: 'catchment', label: 'Catchment' },\n    { key: 'uncovered', label: 'Uncovered' },\n];\nconst travelTimeTypeKeySelector = (travelTimeType: TravelTimeType) => travelTimeType.key;\nconst travelTimeTypeLabelSelector = (travelTimeType: TravelTimeType) => travelTimeType.label;\n\nconst layerKeySelector = (d: Layer) => d.id;\nconst layerLabelSelector = (d: Layer) => d.name;\n\nconst onClickTooltipOptions: mapboxgl.PopupOptions = {\n    closeOnClick: true,\n    closeButton: false,\n    offset: 8,\n    maxWidth: '480px',\n};\n\ninterface Props {\n    className?: string;\n}\n\nfunction Covid19(props: Props) {\n    const { className } = props;\n    const { regionLevel } = useContext(NavbarContext);\n\n    const [selectedFiveWOption, setFiveWOption] = useState<CovidFiveWOptionKey | undefined>('component');\n    const [selectedIndicator, setSelectedIndicator] = useState<number | undefined>();\n    const [selectedAgeGroup, setSelectedAgeGroup] = useState<AgeGroupOption>('belowFourteen');\n\n    const [showHealthResource, setShowHealthResource] = useState<boolean>(true);\n    const [showHealthTravelTime, setShowHealthTravelTime] = useState<boolean>(false);\n    const [selectedHospitals, setSelectedHospitals] = useState<string[]>([]);\n    const [selectedSeason, setSeason] = useState<Season['key']>('dry');\n    const [selectedTravelTimeType, setTravelTimeType] = useState<TravelTimeType['key']>('catchment');\n    const [selectedHospitalType, setHospitalType] = useState<HospitalType['key']>('deshosp');\n\n    const [selectedLayer, setSelectedLayer] = useState<number | undefined>(undefined);\n\n    const indicatorListGetUrl = `${apiEndPoint}/core/indicator-list/?is_covid=1`;\n    const [indicatorListPending, indicatorListResponse] = useRequest<MultiResponse<Indicator>>(\n        indicatorListGetUrl,\n    );\n    const mapLayerGetUrl = `${apiEndPoint}/core/map-layer/`;\n    const [\n        mapLayerListPending,\n        mapLayerListResponse,\n    ] = useRequest<MultiResponse<Layer>>(mapLayerGetUrl);\n\n    const [\n        mapStateForIndicatorPending,\n        mapStateForIndicator,\n    ] = useMapStateForIndicator(regionLevel, selectedIndicator, selectedAgeGroup);\n\n    const [\n        mapStateForFiveWPending,\n        covidFiveWData,\n    ] = useMapStateForCovidFiveW(regionLevel, selectedFiveWOption);\n\n    const mapStateForFiveW = useMemo(\n        () => (\n            covidFiveWData.map(v => ({ id: v.id, value: v.value }))\n        ),\n        [covidFiveWData],\n    );\n    const [invertMapStyle, setInvertMapStyle] = useState(false);\n\n\n    interface Region {\n        name: string;\n    }\n    interface ClickedRegion {\n        feature: GeoJSON.Feature<GeoJSON.Polygon, Region>;\n        lngLat: mapboxgl.LngLatLike;\n    }\n    // FIXME: clear this on region change\n    const [\n        clickedRegionProperties,\n        setClickedRegionProperties,\n    ] = React.useState<ClickedRegion | undefined>();\n\n    const indicatorOptions = useMemo(\n        () => {\n            if (!indicatorListResponse?.results) {\n                return undefined;\n            }\n            const options = [\n                ...indicatorListResponse?.results,\n            ];\n            options.push({ id: -1, fullTitle: 'Age group', abstract: undefined, category: 'Demographics' });\n            return options;\n        },\n        [indicatorListResponse],\n    );\n\n    const {\n        choroplethMapState,\n        choroplethTitle,\n        choroplethInteger,\n        choroplethUnit,\n\n        bubbleMapState,\n        bubbleTitle,\n        bubbleInteger,\n        bubbleUnit,\n\n        titleForPrintBar,\n    } = useMemo(() => {\n        const indicator = indicatorOptions?.find(\n            i => indicatorKeySelector(i) === selectedIndicator,\n        );\n        const indicatorTitle = indicator && indicatorLabelSelector(indicator);\n\n        const fiveW = fiveWOptions.find(i => fiveWKeySelector(i) === selectedFiveWOption);\n        const fiveWTitle = fiveW && fiveWLabelSelector(fiveW);\n\n        const title = [fiveWTitle, indicatorTitle].filter(isDefined).join(' & ');\n\n        if (invertMapStyle) {\n            return {\n                choroplethMapState: mapStateForIndicator,\n                choroplethTitle: indicatorTitle,\n                choroplethInteger: indicator?.datatype === 'integer',\n                choroplethUnit: indicator?.unit,\n\n                bubbleMapState: mapStateForFiveW,\n                bubbleTitle: fiveWTitle,\n                bubbleInteger: fiveW?.datatype === 'integer',\n                bubbleUnit: fiveW?.unit,\n\n                titleForPrintBar: title,\n            };\n        }\n        return {\n            choroplethMapState: mapStateForFiveW,\n            choroplethTitle: fiveWTitle,\n            choroplethInteger: fiveW?.datatype === 'integer',\n            choroplethUnit: fiveW?.unit,\n\n            bubbleMapState: mapStateForIndicator,\n            bubbleTitle: indicatorTitle,\n            bubbleInteger: indicator?.datatype === 'integer',\n            bubbleUnit: indicator?.unit,\n\n            titleForPrintBar: title,\n        };\n    }, [\n        invertMapStyle,\n        mapStateForIndicator,\n        mapStateForFiveW,\n        selectedIndicator,\n        selectedFiveWOption,\n        indicatorOptions,\n    ]);\n\n    // const mapStatePending = mapStateForIndicatorPending || mapStateForFiveWPending;\n    // const pending = mapStatePending || indicatorListPending;\n    const indicatorData = useMemo(\n        () => {\n            if (isDefined(selectedIndicator)) {\n                if (selectedIndicator === -1 && selectedAgeGroup) {\n                    const ageGroup = ageGroupOptions.find(v => v.key === selectedAgeGroup);\n                    const ageGroupLabel = ageGroup && ageGroupTooltipLabelSelector(ageGroup);\n                    const ageGroupValue = mapStateForIndicator.find(\n                        v => v.id === clickedRegionProperties?.feature.id,\n                    )?.value;\n\n                    return {\n                        label: ageGroupLabel,\n                        value: ageGroupValue,\n                    };\n                }\n\n                const indicator = indicatorOptions?.find(\n                    i => indicatorKeySelector(i) === selectedIndicator,\n                );\n\n                if (indicator) {\n                    const indicatorTitle = indicatorLabelSelector(indicator);\n\n                    const indicatorValue = mapStateForIndicator.find(\n                        v => v.id === clickedRegionProperties?.feature.id,\n                    )?.value;\n\n                    return {\n                        label: indicatorTitle,\n                        value: indicatorValue,\n                    };\n                }\n            }\n            return undefined;\n        },\n        [\n            selectedIndicator,\n            clickedRegionProperties,\n            indicatorOptions,\n            mapStateForIndicator,\n            selectedAgeGroup,\n        ],\n    );\n\n    const {\n        paint: mapPaint,\n        legend: mapLegend,\n        min: dataMinValue,\n    } = useMemo(\n        () => {\n            const valueList = choroplethMapState.map(d => d.value);\n            const min = Math.min(...valueList);\n            const max = Math.max(...valueList);\n\n            return generateChoroplethMapPaintAndLegend(colorDomain, min, max, choroplethInteger);\n        },\n        [choroplethMapState, choroplethInteger],\n    );\n\n    const {\n        mapPaint: bubblePaint,\n        legend: bubbleLegend,\n        legendType: bubbleLegendType,\n    } = useMemo(() => {\n        const valueList = bubbleMapState\n            .map(d => d.value)\n            .filter(isDefined)\n            .map(Math.abs);\n\n        const hasNegativeValues = bubbleMapState.some(v => v.value < 0);\n        const hasPositiveValues = bubbleMapState.some(v => v.value > 0);\n\n        let legendType: BubbleLegendType = 'both';\n        if (hasNegativeValues && !hasPositiveValues) {\n            legendType = 'negative';\n        } else if (!hasNegativeValues && hasPositiveValues) {\n            legendType = 'positive';\n        }\n\n        const min = Math.min(...valueList);\n        const max = Math.max(...valueList);\n\n        let maxRadius = 50;\n        if (regionLevel === 'district') {\n            maxRadius = 40;\n        } else if (regionLevel === 'municipality') {\n            maxRadius = 30;\n        }\n\n        return {\n            legendType,\n            ...generateBubbleMapPaintAndLegend(min, max, maxRadius, bubbleInteger),\n        };\n    }, [bubbleMapState, bubbleInteger, regionLevel]);\n\n    const selectedIndicatorDetails = useMemo(\n        () => {\n            if (selectedIndicator) {\n                return indicatorOptions?.find(\n                    d => d.id === selectedIndicator,\n                );\n            }\n            return undefined;\n        },\n        [selectedIndicator, indicatorOptions],\n    );\n\n    // FIXME: use useCallback\n    const handleHospitalToggle = (\n        name: string | undefined,\n    ) => {\n        if (!name) {\n            return;\n        }\n        setSelectedHospitals((hospitals) => {\n            const hospitalIndex = hospitals.findIndex(hospital => hospital === name);\n            if (hospitalIndex !== -1) {\n                const newHospitals = [...hospitals];\n                newHospitals.splice(hospitalIndex, 1);\n                return newHospitals;\n            }\n            return [...hospitals, name];\n        });\n    };\n\n    // FIXME: use useCallback\n    const handleHospitalClick = (\n        feature: mapboxgl.MapboxGeoJSONFeature,\n    ) => {\n        type SelectedHospital = GeoJSON.Feature<GeoJSON.Point, DesignatedHospital>;\n        const { properties: { name } } = feature as unknown as SelectedHospital;\n        handleHospitalToggle(name);\n        return true;\n    };\n\n    const handleTooltipClose = React.useCallback(\n        () => {\n            setClickedRegionProperties(undefined);\n        },\n        [setClickedRegionProperties],\n    );\n\n    const handleMapRegionOnClick = React.useCallback(\n        (\n            feature: mapboxgl.MapboxGeoJSONFeature,\n            lngLat: mapboxgl.LngLat,\n        ) => {\n            setClickedRegionProperties({\n                feature: feature as unknown as GeoJSON.Feature<GeoJSON.Polygon, Region>,\n                lngLat,\n            });\n\n            return true;\n        },\n        [setClickedRegionProperties],\n    );\n\n    useEffect(\n        () => {\n            setSelectedHospitals([]);\n        },\n        [selectedHospitalType],\n    );\n\n    const showTravelTimeChoropleth = (\n        showHealthResource\n        && showHealthTravelTime\n    );\n\n    const rasterLayers = useMemo(\n        () => (mapLayerListResponse?.results.filter(v => v.type === 'raster')),\n        [mapLayerListResponse],\n    );\n\n    const selectedRasterLayer = useMemo(\n        () => rasterLayers?.find(v => v.id === selectedLayer),\n        [rasterLayers, selectedLayer],\n    );\n    const [printMode, setPrintMode] = useState(false);\n    const [ttInfoVisibility, setTtInfoVisbility] = useState(false);\n\n    const showLegend = (\n        bubbleLegend.length > 0\n        || Object.keys(mapLegend).length > 0\n        || showTravelTimeChoropleth\n        || selectedRasterLayer\n    );\n\n    const handleTtInfoVisibilityChange = useCallback(() => {\n        setTtInfoVisbility(!ttInfoVisibility);\n    }, [setTtInfoVisbility, ttInfoVisibility]);\n\n    const dfidData = useMemo(\n        () => covidFiveWData.find(v => v.id === clickedRegionProperties?.feature.id)?.data,\n        [covidFiveWData, clickedRegionProperties],\n    );\n\n    return (\n        <div className={_cs(\n            styles.covid19,\n            className,\n            printMode && styles.printMode,\n        )}\n        >\n            <PrintButton\n                className={styles.printModeButton}\n                printMode={printMode}\n                onPrintModeChange={setPrintMode}\n            />\n            {/* pending && (\n                <Backdrop className={styles.backdrop}>\n                <LoadingAnimation />\n                </Backdrop>\n                )\n              */}\n            <IndicatorMap\n                className={styles.mapContainer}\n                regionLevel={regionLevel}\n                choroplethMapState={choroplethMapState}\n                choroplethMapPaint={mapPaint}\n                bubbleMapState={bubbleMapState}\n                bubbleMapPaint={bubblePaint}\n                rasterLayer={selectedRasterLayer}\n                printMode={printMode}\n                onClick={handleMapRegionOnClick}\n                hideTooltipOnHover\n            >\n                {clickedRegionProperties && (\n                    <MapTooltip\n                        coordinates={clickedRegionProperties.lngLat}\n                        tooltipOptions={onClickTooltipOptions}\n                        onHide={handleTooltipClose}\n                    >\n                        <Tooltip\n                            feature={clickedRegionProperties.feature}\n                            dfidData={dfidData}\n                            indicatorData={indicatorData}\n                        />\n                    </MapTooltip>\n                )}\n                {showHealthResource && (\n                    <TravelTimeLayer\n                        key={`${selectedSeason}-${selectedHospitalType}`}\n                        prefix={`${selectedSeason}-${selectedHospitalType}`}\n                        season={selectedSeason}\n                        hospitalType={selectedHospitalType}\n                        onHospitalClick={handleHospitalClick}\n                        selectedHospitals={selectedHospitals}\n                        travelTimeShown={showHealthTravelTime}\n                        travelTimeType={selectedTravelTimeType}\n                    />\n                )}\n            </IndicatorMap>\n            <Stats className={styles.stats} />\n            <div className={styles.mapStyleConfigContainer}>\n                <RegionSelector searchHidden />\n                <div className={styles.separator} />\n                <div className={styles.health}>\n                    <ToggleButton\n                        className={styles.inputItem}\n                        label=\"Show health facilities\"\n                        value={showHealthResource}\n                        onChange={setShowHealthResource}\n                    />\n                    {showHealthResource && (\n                        <>\n                            <SegmentInput\n                                label=\"Hospitals\"\n                                className={styles.inputItem}\n                                options={hospitalTypeOptions}\n                                onChange={setHospitalType}\n                                value={selectedHospitalType}\n                                optionLabelSelector={hospitalTypeLabelSelector}\n                                optionKeySelector={hospitalTypeKeySelector}\n                            />\n                            {selectedHospitals.length > 0 && (\n                                <div className={styles.hospitals}>\n                                    {selectedHospitals.map(hospital => (\n                                        <Button\n                                            className={styles.button}\n                                            key={hospital}\n                                            name={hospital}\n                                            onClick={handleHospitalToggle}\n                                            icons={(\n                                                <IoIosClose />\n                                            )}\n                                        >\n                                            {hospital}\n                                        </Button>\n                                    ))}\n                                </div>\n                            )}\n                            <div className={styles.travelTimeInputContainer}>\n                                <ToggleButton\n                                    label=\"Show travel time\"\n                                    value={showHealthTravelTime}\n                                    onChange={setShowHealthTravelTime}\n                                />\n                                {showHealthTravelTime && (\n                                    <Button\n                                        onClick={handleTtInfoVisibilityChange}\n                                        transparent\n                                        icons={(\n                                            <IoIosInformationCircleOutline />\n                                        )}\n                                    />\n                                )}\n                            </div>\n                            {showHealthTravelTime && (\n                                <>\n                                    <SegmentInput\n                                        label=\"Type\"\n                                        className={styles.inputItem}\n                                        options={travelTimeTypeOptions}\n                                        onChange={setTravelTimeType}\n                                        value={selectedTravelTimeType}\n                                        optionLabelSelector={travelTimeTypeLabelSelector}\n                                        optionKeySelector={travelTimeTypeKeySelector}\n                                    />\n                                    <SegmentInput\n                                        label=\"Season\"\n                                        className={styles.inputItem}\n                                        options={seasonOptions}\n                                        onChange={setSeason}\n                                        value={selectedSeason}\n                                        optionLabelSelector={seasonLabelSelector}\n                                        optionKeySelector={seasonKeySelector}\n                                    />\n                                    {ttInfoVisibility && (\n                                        <div className={styles.abstract}>\n                                            {travelTimeDetails}\n                                        </div>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </div>\n                <div className={styles.separator} />\n                <SelectInput\n                    label=\"Evidence for Development\"\n                    options={fiveWOptions}\n                    className={styles.inputItem}\n                    onChange={setFiveWOption}\n                    value={selectedFiveWOption}\n                    optionLabelSelector={fiveWLabelSelector}\n                    optionKeySelector={fiveWKeySelector}\n                />\n                <SelectInput\n                    className={styles.inputItem}\n                    label=\"Indicator\"\n                    disabled={indicatorListPending}\n                    options={indicatorOptions}\n                    onChange={setSelectedIndicator}\n                    value={selectedIndicator}\n                    optionLabelSelector={indicatorLabelSelector}\n                    optionKeySelector={indicatorKeySelector}\n                    groupKeySelector={indicatorGroupKeySelector}\n                />\n                {selectedIndicatorDetails && selectedIndicatorDetails.abstract && (\n                    <div className={styles.abstract}>\n                        { selectedIndicatorDetails.abstract }\n                    </div>\n                )}\n                {selectedIndicator === -1 && (\n                    <SegmentInput\n                        label=\"Age range\"\n                        className={styles.inputItem}\n                        options={ageGroupOptions}\n                        onChange={setSelectedAgeGroup}\n                        value={selectedAgeGroup}\n                        optionLabelSelector={ageGroupLabelSelector}\n                        optionKeySelector={ageGroupKeySelector}\n                    />\n                )}\n                <ToggleButton\n                    label=\"Toggle Choropleth/Bubble\"\n                    className={styles.inputItem}\n                    value={invertMapStyle}\n                    onChange={setInvertMapStyle}\n                />\n                <div className={styles.separator} />\n                <SelectInput\n                    label=\"Background Layer\"\n                    className={styles.inputItem}\n                    disabled={mapLayerListPending}\n                    options={rasterLayers}\n                    onChange={setSelectedLayer}\n                    value={selectedLayer}\n                    optionKeySelector={layerKeySelector}\n                    optionLabelSelector={layerLabelSelector}\n                />\n            </div>\n            {showLegend && (\n                <div className={styles.legendContainer}>\n                    <ChoroplethLegend\n                        className={styles.legend}\n                        title={choroplethTitle}\n                        minValue={dataMinValue}\n                        legend={mapLegend}\n                        unit={choroplethUnit}\n                    />\n                    <BubbleLegend\n                        className={styles.legend}\n                        title={bubbleTitle}\n                        data={bubbleLegend}\n                        keySelector={legendKeySelector}\n                        valueSelector={legendValueSelector}\n                        radiusSelector={legendRadiusSelector}\n                        legendType={bubbleLegendType}\n                        unit={bubbleUnit}\n                    />\n                    {selectedRasterLayer && (\n                        <RasterLegend\n                            className={styles.legend}\n                            rasterLayer={selectedRasterLayer}\n                        />\n                    )}\n                    {showTravelTimeChoropleth && (\n                        <>\n                            {selectedTravelTimeType === 'catchment' && (\n                                <ChoroplethLegend\n                                    title=\"Catchment\"\n                                    className={styles.legend}\n                                    minValue=\"\"\n                                    opacity={0.6}\n                                    unit=\"hours\"\n                                    legend={{\n                                        [fourHourColor]: 4,\n                                        [eightHourColor]: 8,\n                                        [twelveHourColor]: 12,\n                                    }}\n                                />\n                            )}\n                            {selectedTravelTimeType === 'uncovered' && (\n                                <ChoroplethLegend\n                                    title=\"Uncovered\"\n                                    className={styles.legend}\n                                    minValue=\"\"\n                                    opacity={0.6}\n                                    unit=\"hours\"\n                                    legend={{\n                                        [twelveHourUncoveredColor]: '> 12',\n                                        [eightHourUncoveredColor]: '> 8',\n                                        [fourHourUncoveredColor]: '> 4',\n                                    }}\n                                />\n                            )}\n                        </>\n                    )}\n                </div>\n            )}\n            <PrintDetailsBar\n                show={printMode}\n                title={titleForPrintBar}\n                description={selectedIndicatorDetails?.abstract}\n            />\n        </div>\n    );\n}\n\nexport default Covid19;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"styles_stats_2ZaCTaCeZRoKbsGU7aDWus\",\"heading\":\"styles_heading_3egfWjcRCcDX89_bg-N_X5\",\"content\":\"styles_content_34v7Pc35tALxFQmEJbhd5J\",\"footer\":\"styles_footer_QdPlUVbjkhOXdaMBjNZ2o\",\"stat-output\":\"styles_stat-output_3fHHsha5SKq9CDWf1MnBBZ\",\"statOutput\":\"styles_stat-output_3fHHsha5SKq9CDWf1MnBBZ\",\"label\":\"styles_label_1glb3GwUqM8Y2T5-AJGUi8\",\"value\":\"styles_value_4iTucTrHwZdk0tpHVZxXL\",\"external-link\":\"styles_external-link_1AnkZ9-j9VuRO0F9W46FzP\",\"externalLink\":\"styles_external-link_1AnkZ9-j9VuRO0F9W46FzP\",\"icon\":\"styles_icon_1__NPJYpicbtpO18k3Qn4B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"last-updated-container\":\"styles_last-updated-container_1is3q3Iz9OESdYe-oqhyqb\",\"lastUpdatedContainer\":\"styles_last-updated-container_1is3q3Iz9OESdYe-oqhyqb\",\"label\":\"styles_label_12OcTcfkECkuTsOUSX8lVl\",\"date\":\"styles_date_1J5tF3b5jTNuknoZKPKStj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"covid19\":\"styles_covid19_1ru0D9027N_5jIgcPLv01P\",\"map-container\":\"styles_map-container_Go3N8Rt1Mdl3ZkCb4MGZr\",\"mapContainer\":\"styles_map-container_Go3N8Rt1Mdl3ZkCb4MGZr\",\"map-style-config-container\":\"styles_map-style-config-container_1Qm4caUwDNeoX8GK6jfwUW\",\"mapStyleConfigContainer\":\"styles_map-style-config-container_1Qm4caUwDNeoX8GK6jfwUW\",\"separator\":\"styles_separator_3dg8Sp81Gp2DS2ddmhCCbr\",\"input-item\":\"styles_input-item_15b4R3HPOen6H6Br-Zx_f6\",\"inputItem\":\"styles_input-item_15b4R3HPOen6H6Br-Zx_f6\",\"travel-time-input-container\":\"styles_travel-time-input-container_2pILZJ3MEj5xLelIWypnLP\",\"travelTimeInputContainer\":\"styles_travel-time-input-container_2pILZJ3MEj5xLelIWypnLP\",\"hospitals\":\"styles_hospitals_5iX42H9sRomSWa-2eaKU8\",\"button\":\"styles_button_1QC14Pf-laesfhB40XHIqz\",\"abstract\":\"styles_abstract_3Bz4OcKgKjtG441Vz0iH8t\",\"link\":\"styles_link_qQJT9SDTg3R9nHGu_9q6j\",\"legend-container\":\"styles_legend-container_37EIJjLNsDmxt4JkwiTgmu\",\"legendContainer\":\"styles_legend-container_37EIJjLNsDmxt4JkwiTgmu\",\"legend\":\"styles_legend_3BlCKisck6MwCbLiddrb5y\",\"stats\":\"styles_stats_1oa8_G_wLEGIY46bFlKH47\",\"print-mode-button\":\"styles_print-mode-button_2VBVtc1EBtrcC4Yz2fNWXy\",\"printModeButton\":\"styles_print-mode-button_2VBVtc1EBtrcC4Yz2fNWXy\",\"print-mode\":\"styles_print-mode_3ONC02s7X8gkghDov6SwrQ\",\"printMode\":\"styles_print-mode_3ONC02s7X8gkghDov6SwrQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text-output\":\"styles_text-output_2_rJHQmlRntdAxp22BQMYh\",\"textOutput\":\"styles_text-output_2_rJHQmlRntdAxp22BQMYh\",\"label\":\"styles_label_17-UdOhjBpj5h9nMClRJsn\",\"value\":\"styles_value_1oHiebVOEyNqCutPrs3jwE\",\"null-value\":\"styles_null-value_nwuDe7BAnbvEObXc51uQe\",\"nullValue\":\"styles_null-value_nwuDe7BAnbvEObXc51uQe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list-item\":\"styles_list-item_2H6RGvVQ0AJnOG1zGFw94R\",\"listItem\":\"styles_list-item_2H6RGvVQ0AJnOG1zGFw94R\",\"count\":\"styles_count_1bG0RzkWCh5JdFrkvJNLt_\",\"label\":\"styles_label_13c_2IaLonmp7Fjd-ulcXu\",\"tooltip\":\"styles_tooltip_BWW55NeuWy6bPScEB_YzQ\",\"budget\":\"styles_budget_2WXyi9YeveVaEbiIXWE2bo\",\"content\":\"styles_content_38m5BlGMhQkxxY4exMJSKn\",\"projects\":\"styles_projects_2lYgxwLTYUALjMXss7-n3x\",\"sectors\":\"styles_sectors_1dMnPvWQaSYvhryxFTObs\"};"],"sourceRoot":""}